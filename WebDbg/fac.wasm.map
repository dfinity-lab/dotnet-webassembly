{"version":3,"sources":["prelude","fac.as"],"sourcesContent":["\ntype Any = prim \"Any\";\ntype None = prim \"None\";\ntype Shared = prim \"Shared\";\ntype Null = prim \"Null\";\ntype Bool = prim \"Bool\";\ntype Nat = prim \"Nat\";\ntype Int = prim \"Int\";\ntype Word8 = prim \"Word8\";\ntype Word16 = prim \"Word16\";\ntype Word32 = prim \"Word32\";\ntype Word64 = prim \"Word64\";\ntype Float = prim \"Float\";\ntype Char = prim \"Char\";\ntype Text = prim \"Text\";\n\ntype Iter<T_> = {next : () -> ?T_};\n\nfunc abs(x : Int) : Nat { (prim \"abs\" : Int -> Nat) x };\n\nfunc ignore(_ : Any) {};\n\nclass range(x : Nat, y : Nat) {\n  private var i = x;\n  next() : ?Nat { if (i > y) null else {let j = i; i += 1; ?j} };\n};\n\nclass revrange(x : Nat, y : Nat) {\n  private var i = x + 1;\n  next() : ?Nat { if (i <= y) null else {i -= 1; ?i} };\n};\n\nfunc charToText(c : Char) : Text = (prim \"Char->Text\" : Char -> Text) c;\n\nfunc printInt(x : Int) { (prim \"printInt\" : Int -> ()) x };\nfunc printChar(x : Char) { print (charToText x) };\nfunc print(x : Text) { (prim \"print\" : Text -> ()) x };\n\n// Hashing\nfunc hashInt(n : Int) : Word32 = (prim \"Int~hash\" : Int -> Word32) n;\n\n// Conversions\nfunc natToWord8(n : Nat) : Word8 = (prim \"Nat->Word8\" : Nat -> Word8) n;\nfunc word8ToNat(n : Word8) : Nat = (prim \"Word8->Nat\" : Word8 -> Nat) n;\nfunc intToWord8(n : Int) : Word8 = (prim \"Int->Word8\" : Int -> Word8) n;\nfunc word8ToInt(n : Word8) : Int = (prim \"Word8->Int\" : Word8 -> Int) n;\n\nfunc natToWord16(n : Nat) : Word16 = (prim \"Nat->Word16\" : Nat -> Word16) n;\nfunc word16ToNat(n : Word16) : Nat = (prim \"Word16->Nat\" : Word16 -> Nat) n;\nfunc intToWord16(n : Int) : Word16 = (prim \"Int->Word16\" : Int -> Word16) n;\nfunc word16ToInt(n : Word16) : Int = (prim \"Word16->Int\" : Word16 -> Int) n;\n\nfunc natToWord32(n : Nat) : Word32 = (prim \"Nat->Word32\" : Nat -> Word32) n;\nfunc word32ToNat(n : Word32) : Nat = (prim \"Word32->Nat\" : Word32 -> Nat) n;\nfunc intToWord32(n : Int) : Word32 = (prim \"Int->Word32\" : Int -> Word32) n;\nfunc word32ToInt(n : Word32) : Int = (prim \"Word32->Int\" : Word32 -> Int) n;\n\nfunc natToWord64(n : Nat) : Word64 = (prim \"Nat->Word64\" : Nat -> Word64) n;\nfunc word64ToNat(n : Word64) : Nat = (prim \"Word64->Nat\" : Word64 -> Nat) n;\nfunc intToWord64(n : Int) : Word64 = (prim \"Int->Word64\" : Int -> Word64) n;\nfunc word64ToInt(n : Word64) : Int = (prim \"Word64->Int\" : Word64 -> Int) n;\n\nfunc charToWord32(c : Char) : Word32 = (prim \"Char->Word32\" : Char -> Word32) c;\nfunc word32ToChar(w : Word32) : Char = (prim \"Word32->Char\" : Word32 -> Char) w;\nfunc decodeUTF8(s : Text) : (Word32, Char) = (prim \"decodeUTF8\" : Text -> (Word32, Char)) s;\n\n// Exotic bitwise operations\nfunc shrsWord8(w : Word8, amount : Word8) : Word8 = (prim \"shrs8\" : (Word8, Word8) -> Word8) (w, amount);\nfunc popcntWord8(w : Word8) : Word8 = (prim \"popcnt8\" : Word8 -> Word8) w;\nfunc clzWord8(w : Word8) : Word8 = (prim \"clz8\" : Word8 -> Word8) w;\nfunc ctzWord8(w : Word8) : Word8 = (prim \"ctz8\" : Word8 -> Word8) w;\nfunc btstWord8(w : Word8, amount : Word8) : Bool = (prim \"btst8\" : (Word8, Word8) -> Word8) (w, amount) != (0 : Word8);\n\nfunc shrsWord16(w : Word16, amount : Word16) : Word16 = (prim \"shrs16\" : (Word16, Word16) -> Word16) (w, amount);\nfunc popcntWord16(w : Word16) : Word16 = (prim \"popcnt16\" : Word16 -> Word16) w;\nfunc clzWord16(w : Word16) : Word16 = (prim \"clz16\" : Word16 -> Word16) w;\nfunc ctzWord16(w : Word16) : Word16 = (prim \"ctz16\" : Word16 -> Word16) w;\nfunc btstWord16(w : Word16, amount : Word16) : Bool = (prim \"btst16\" : (Word16, Word16) -> Word16) (w, amount) != (0 : Word16);\n\nfunc shrsWord32(w : Word32, amount : Word32) : Word32 = (prim \"shrs\" : (Word32, Word32) -> Word32) (w, amount);\nfunc popcntWord32(w : Word32) : Word32 = (prim \"popcnt\" : Word32 -> Word32) w;\nfunc clzWord32(w : Word32) : Word32 = (prim \"clz\" : Word32 -> Word32) w;\nfunc ctzWord32(w : Word32) : Word32 = (prim \"ctz\" : Word32 -> Word32) w;\nfunc btstWord32(w : Word32, amount : Word32) : Bool = (prim \"btst\" : (Word32, Word32) -> Word32) (w, amount) != (0 : Word32);\n\nfunc shrsWord64(w : Word64, amount : Word64) : Word64 = (prim \"shrs64\" : (Word64, Word64) -> Word64) (w, amount);\nfunc popcntWord64(w : Word64) : Word64 = (prim \"popcnt64\" : Word64 -> Word64) w;\nfunc clzWord64(w : Word64) : Word64 = (prim \"clz64\" : Word64 -> Word64) w;\nfunc ctzWord64(w : Word64) : Word64 = (prim \"ctz64\" : Word64 -> Word64) w;\nfunc btstWord64(w : Word64, amount : Word64) : Bool = (prim \"btst64\" : (Word64, Word64) -> Word64) (w, amount) != (0 : Word64);\n\n// Internal helper functions for the show translation\n\n// The @ in the name ensures that this connot be shadowed by user code, so\n// compiler passes can rely on them being in scope\n// The text_of functions do not need to be exposed; the user can just use\n// the show above.\n\nfunc @text_of_Nat(x : Nat) : Text {\n  var text = \"\";\n  var n = x;\n  let base = 10;\n\n  while (n > 0) {\n    let rem = n % base;\n    text := (switch (rem) {\n      case (0) { \"0\" };\n      case (1) { \"1\" };\n      case (2) { \"2\" };\n      case (3) { \"3\" };\n      case (4) { \"4\" };\n      case (5) { \"5\" };\n      case (6) { \"6\" };\n      case (7) { \"7\" };\n      case (8) { \"8\" };\n      case (9) { \"9\" };\n      case (_) { assert false; \"\" };\n    }) # text;\n    n := n / base;\n  };\n  return text;\n};\n\nfunc @text_of_Int(x : Int) : Text {\n  if (x == 0) {\n    return \"0\";\n  };\n  if (x < 0) {\n    \"-\" # @text_of_Nat(abs x)\n  } else {\n    @text_of_Nat(abs x)\n  }\n};\n\nfunc @text_of_Bool(b : Bool) : Text {\n  if (b) \"true\" else \"false\"\n};\n\nfunc @text_of_Text(t : Text) : Text {\n  // TODO: Escape properly\n  \"\\\"\" # t # \"\\\"\";\n};\n\nfunc @text_of_option<T>(f : T -> Text, x : ?T) : Text {\n  switch (x) {\n    case (?y) {\"?(\" # f y # \")\"};\n    case null {\"null\"};\n  }\n};\n\nfunc @text_of_variant<T>(l : Text, f : T -> Text, x : T) : Text {\n  let fx = f x;\n  if (fx == \"()\") \"(#\" # l # \")\"\n  else \"(#\" # l # \" \" # fx # \")\"\n};\n\nfunc @text_of_array<T>(f : T -> Text, xs : [T]) : Text {\n  var text = \"\";\n  for (x in xs.vals()) {\n    if (text == \"\") {\n      text := text # \"[\";\n    } else {\n      text := text # \", \";\n    };\n    text := text # f x;\n  };\n  text := text # \"]\";\n  return text;\n};\n\nfunc @text_of_array_mut<T>(f : T -> Text, xs : [var T]) : Text {\n  var text = \"\";\n  for (x in xs.vals()) {\n    if (text == \"\") {\n      text := text # \"[var \";\n    } else {\n      text := text # \", \";\n    };\n    text := text # f x;\n  };\n  text := text # \"]\";\n  return text;\n};\n\n// Array utilities\n\n// This would be nicer as a objects, but lets do them as functions\n// until the compiler has a concept of “static objects”\nfunc Array_init<T>(len : Nat,  x : T) : [var T] {\n  (prim \"Array.init\" : <T>(Nat, T) -> [var T])<T>(len, x)\n};\n\nfunc Array_tabulate<T>(len : Nat,  gen : Nat -> T) : [T] {\n  (prim \"Array.tabulate\" : <T>(Nat, Nat -> T) -> [T])<T>(len, gen)\n};\n\ntype Cont<T <: Shared> = T -> () ;\ntype Async<T <: Shared> = Cont<T> -> ();\n\nfunc @new_async<T <: Shared>():(Async<T>, Cont<T>) {\n  let empty = func k (t:T) = ();\n  var result : ?T = null;\n  var ks : T -> () = empty;\n  func fulfill(t:T):() {\n    switch(result) {\n      case null {\n        result := ?t;\n        let ks_ = ks;\n        ks := empty;\n        ks_(t);\n      };\n      case (?t) (assert(false));\n      };\n    };\n  func enqueue(k:Cont<T>):() {\n    switch(result) {\n      case null {\n        let ks_ = ks;\n        ks := (func (t:T) {ks_(t);k(t);});\n      };\n      case (?t) (k(t));\n    };\n  };\n  (enqueue,fulfill)\n};\n",null],"mappings":"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"}